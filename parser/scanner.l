%{

/**
* Scanner descriptor file for the Simple Language compiler.
* 
* MO403 - Implementation of Programming Languages
*
* Gustavo Ciotto Pinton
*
**/

/* Inclusion of the file generated by bison or yacc */

#include <stdlib.h>
#include "parser.h"

/* Declarations to avoid annoying warnings */
int fileno(FILE *);

/* Variables used in the test programs */
int line_num = 1, lexerror = 0;

/* Variable used by bison */
char *token_value;

%}

%x INLINE_COMMENTS
%x MULTI_COMMENTS

%%

%{
/* TOKEN SPECIFICATION */
%}

%{
/* Rejects blanks, new lines and tabs. */
%}

[ \t]                           ;
<INITIAL,MULTI_COMMENTS>\n      {line_num++;}      

%{
/* Logical operations */
%}

"=="                            return(EQUAL);
"!="                            return(DIFFERENT);
"<"                             return(LESS);
"<="                            return(LESS_OR_EQUAL);
">"                             return(GREATER);
">="                            return(GREATER_OR_EQUAL);

%{
/* Binary symbols */
%}

"+"			        return(PLUS);
"-"			        return(MINUS);
"||"			        return(OR);
"*"			        return(MULTIPLY);
"/"                             return(DIV);
"&&"			        return(AND);
"!"                             return(NOT);

%{
/* Expression Symbols */
%}


"}"                             return(CLOSE_BRACE);
"]"                             return(CLOSE_BRACKET);
")"			        return(CLOSE_PAREN);
":"                             return(COLON);
","                             return(COMMA);
<INITIAL,INLINE_COMMENTS><<EOF>> return(END_OF_FILE);
"("			        return(OPEN_PAREN);
"["			        return(OPEN_BRACKET);
"{"                             return(OPEN_BRACE);
"="			        return(ASSIGN);
";"			        return(SEMI_COLON);

%{
/* Reserved words */
%}

else                            return(ELSE);
functions                       return(FUNCTIONS);
goto                            return(GOTO);
if                              return(IF);
while                           return(WHILE);
labels                          return(LABELS);
return                          return(RETURN);
types                           return(TYPES);
var                             return(VAR);
vars                            return(VARS);
void                            return(VOID);

%{
/* Comments */
%}

"/*"                            BEGIN(MULTI_COMMENTS);
<MULTI_COMMENTS>[^*]*	        ;
<MULTI_COMMENTS>"*/"            BEGIN(INITIAL);
<MULTI_COMMENTS><<EOF>>         return(UNFINISHED_COMMENT);

"//"                            BEGIN(INLINE_COMMENTS);
<INLINE_COMMENTS>[^\n]*         ;
<INLINE_COMMENTS>\n             {line_num++; BEGIN(INITIAL);}

%{
/* Identifiers and integers */
%}

[a-z][a-z0-9]*		        {token_value = (char *) malloc ((yyleng + 1) * sizeof (char));
                                strcpy(token_value, yytext);
                                return(IDENTIFIER);}

[0-9]+			        {token_value = (char *) malloc ((yyleng + 1) * sizeof (char));
                                strcpy(token_value, yytext);
                                return(INTEGER);}

.                               {lexerror = 1; return(LEXICAL_ERROR); }

%%

int yywrap(){
        return 1;
}
